plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.9'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	// restdocs
	// adoc 파일 변환, build 디렉토리에 복사
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	// 테스트 결과를 OAS용 yaml 파일로 변환
	id "com.epages.restdocs-api-spec" version "0.16.2"
}

group = 'sku'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	asciidoctorExt
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set("snippetsDir", file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'io.netty:netty-resolver-dns-native-macos:4.1.79.Final:osx-aarch_64'
	// swagger(openapi)
	implementation("org.springdoc:springdoc-openapi-ui:1.6.11")
	implementation("org.springdoc:springdoc-openapi-webmvc-core:1.6.11")

	// spring security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation "org.springframework.boot:spring-boot-configuration-processor"
	// oauth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	// QueryDSL JPA
	implementation 'com.querydsl:querydsl-jpa'
	implementation 'com.querydsl:querydsl-apt'
	// QFile 생성 및 가져오기
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// restdocs
	// mockMvc를 사용해서 snippets을 생성
	testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
	testImplementation("com.epages:restdocs-api-spec:0.16.2")
	testImplementation("com.epages:restdocs-api-spec-mockmvc:0.16.2")

	asciidoctorExt("org.springframework.restdocs:spring-restdocs-asciidoctor")
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.register("restDocsTest", Test) { // ./gradlew clean restDocsTest 시 restDocs 파일 생성
	outputs.dir snippetsDir
	useJUnitPlatform {
		includeTags("restDocs")
	}
	finalizedBy "asciidoctor"
	finalizedBy "openapi3"
	finalizedBy "bearerAuthentication"
}

tasks.named("asciidoctor") {
	configurations 'asciidoctorExt'
	baseDirFollowsSourceFile()
	inputs.dir snippetsDir
	dependsOn restDocsTest
}

openapi3 {
	servers = [
			{ url = 'http://localhost:8080' },
	]
	title = 'Moa Moa Swagger + RestDocs API'
	description = '이 문서는 RestDocs로 테스트 된 API만 모아둔 문서입니다.\n' +
			'아직 개발중인 API와 함께 모아둔 문서를 확인하고 싶으시다면 http://localhost:8080/swagger-ui/index.html 로,\n' +
			'RestDocs를 이용한 API 명세서를 확인하고 싶으시다면 http://localhost:8080/docs/index.html 로 접속해주세요.'
	version = "${project.version}"
	format = 'yaml'
}

tasks.register("bearerAuthentication") {
	// epages사의 restdocs-api-spec 라이브러리에는 bearer 설정이 없음, 생성된 yaml 파일에 bearer 설정을 문자열로 추가
	doLast {
		def apiSpecFile = file('build/api-spec/openapi3.yaml')
		def contentToAdd =
				"  securitySchemes:\n" +
				"    bearerAuth:\n" +
						"      type: http\n" +
						"      scheme: bearer\n" +
						"      bearerFormat: JWT\n" +
						"\n"+
				"security:\n" +
				"  - bearerAuth: []"
		def existingContent = apiSpecFile.text
		def updatedContent = existingContent + contentToAdd
		apiSpecFile.write(updatedContent)
	}
}


tasks.register("apiBuild", GradleBuild) { // ./gradlew apiBuild 시 restdocs 생성 후 build
	tasks = ["clean", "restDocsTest", "build"]
}

tasks.named("bootBuildImage") { // ./gradlew bootBuildImage 시 docker hub로 배포
	imageName = project.DOCKER_ID + "/" + project.DOCKER_IMAGE_NAME
	publish = true
	docker {
		publishRegistry {
			username = project.DOCKER_ID
			password = project.DOCKER_PW
		}
	}
}

bootJar {
	from("swagger-ui") {
		into "BOOT-INF/classes/static/swagger"
	}
	from("${asciidoctor.outputDir}") {
		into "BOOT-INF/classes/static/docs"
	}
	from("build/api-spec") {
		into "BOOT-INF/classes/static/swagger"
	}
	archiveFileName.set "moamoa.jar"
}

springBoot {
	buildInfo()
}
